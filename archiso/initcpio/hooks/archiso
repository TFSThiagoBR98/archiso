#!/bin/ash
#
# SPDX-License-Identifier: GPL-3.0-or-later

# args: source, newroot, mountpoint
_mnt_overlayfs() {
    local src="${1}"
    local newroot="${2}"
    local mnt="${3}"

    msg ":: OverlayFS SRC: ${src}, NEWROOT: ${newroot}, MNT: ${mnt}..."

    mkdir -p "/run/archiso/cowspace/${cow_directory}/upperdir" "/run/archiso/cowspace/${cow_directory}/workdir"
    mount -t overlay -o \
    "lowerdir=${src},upperdir=/run/archiso/cowspace/${cow_directory}/upperdir,workdir=/run/archiso/cowspace/${cow_directory}/workdir" \
    airootfs "${newroot}${mnt}"
}


# args: /path/to/image_file, mountpoint
_mnt_sfs() {
    local img="${1}"
    local mnt="${2}"
    local img_fullname="${img##*/}"
    local sfs_dev

    # shellcheck disable=SC2154
    # defined via initcpio's parse_cmdline()
    if [ "${copytoram}" = "y" ]; then
        msg -n ":: Copying squashfs image to RAM..."
        if ! cp -- "${img}" "/run/archiso/copytoram/${img_fullname}" ; then
            echo "ERROR: while copy '${img}' to '/run/archiso/copytoram/${img_fullname}'"
            launch_interactive_shell
        fi
        img="/run/archiso/copytoram/${img_fullname}"
        msg "done."
    fi
    sfs_dev="$(losetup --find --show --read-only -- "${img}")"
    echo "${sfs_dev}" >> /run/archiso/used_block_devices
    _mnt_dev "${sfs_dev}" "${mnt}" "-r" "defaults"
}

# args: /path/to/image_file, mountpoint
_mnt_erofs() {
    local img="${1}"
    local mnt="${2}"
    local img_fullname="${img##*/}"
    local erofs_dev

    # shellcheck disable=SC2154
    # defined via initcpio's parse_cmdline()
    if [ "${copytoram}" = "y" ]; then
        msg -n ":: Copying EROFS image to RAM..."
        if ! cp -- "${img}" "/run/archiso/copytoram/${img_fullname}" ; then
            echo "ERROR: while copy '${img}' to '/run/archiso/copytoram/${img_fullname}'"
            launch_interactive_shell
        fi
        img="/run/archiso/copytoram/${img_fullname}"
        msg "done."
    fi
    erofs_dev="$(losetup --find --show --read-only -- "${img}")"
    echo "${erofs_dev}" >> /run/archiso/used_block_devices
    _mnt_dev "${erofs_dev}" "${mnt}" "-r" "defaults" "erofs"
}

# args: device, mountpoint, flags, opts
_mnt_dev() {
    local dev="${1}"
    local mnt="${2}"
    local flg="${3}"
    local opts="${4}"
    local fstype="${5:-auto}"

    mkdir -p "${mnt}"

    msg ":: Mounting '${dev}' to '${mnt}'"

    while ! poll_device "${dev}" 30; do
        echo "ERROR: '${dev}' device did not show up after 30 seconds..."
        echo "   Falling back to interactive prompt"
        echo "   You can try to fix the problem manually, log out when you are finished"
        launch_interactive_shell
    done

    if mount -t "${fstype}" -o "${opts}" "${flg}" "${dev}" "${mnt}"; then
        msg ":: Device '${dev}' mounted successfully."
    else
        echo "ERROR; Failed to mount '${dev}'"
        echo "   Falling back to interactive prompt"
        echo "   You can try to fix the problem manually, log out when you are finished"
        launch_interactive_shell
    fi
}

_verify_checksum() {
    local _status
    cd "/run/archiso/bootmnt/${archisobasedir}/${arch}" || exit 1
    sha512sum -c airootfs.sha512 > /tmp/checksum.log 2>&1
    _status=$?
    cd -- "${OLDPWD}" || exit 1
    return "${_status}"
}

_verify_signature() {
    local _status
    local sigfile="${1}"
    cd "/run/archiso/bootmnt/${archisobasedir}/${arch}" || exit 1
    gpg --homedir /gpg --status-fd 1 --verify "${sigfile}" 2>/dev/null | grep -qE '^\[GNUPG:\] GOODSIG'
    _status=$?
    cd -- "${OLDPWD}" || exit 1
    return ${_status}
}

run_hook() {
    msg ":: Loading archiso..."

    [ -z "${arch}" ] && arch="$(uname -m)"
    [ -z "${copytoram_size}" ] && copytoram_size="75%"
    [ -z "${archisobasedir}" ] && archisobasedir="arch"
    [ -z "${dm_snap_prefix}" ] && dm_snap_prefix="arch"
    # shellcheck disable=SC2154
    # defined via initcpio's parse_cmdline()
    [ -z "${archisodevice}" ] && archisodevice="/dev/disk/by-label/${archisolabel}"
    [ -z "${cow_spacesize}" ] && cow_spacesize="256M"
    # shellcheck disable=SC2154
    # defined via initcpio's parse_cmdline()
    if [ -n "${cow_label}" ]; then
        cow_device="/dev/disk/by-label/${cow_label}"
        [ -z "${cow_persistent}" ] && cow_persistent="P"
    elif [ -n "${cow_device}" ]; then
        [ -z "${cow_persistent}" ] && cow_persistent="P"
    else
        cow_persistent="N"
    fi

    [ -z "${cow_flags}" ] && cow_flags="defaults"
    [ -z "${cow_directory}" ] && cow_directory="persistent_${archisolabel}/${arch}"
    [ -z "${cow_chunksize}" ] && cow_chunksize="8"

    # set mount handler for archiso
    export mount_handler="archiso_mount_handler"
}

# This function is called normally from init script, but it can be called
# as chain from other mount handlers.
# args: /path/to/newroot
archiso_mount_handler() {
    local newroot="${1}"
    local sigfile
    local layerfile
    local layer_dir=""

    msg ":: Mounting boot device, please wait..."

    if ! mountpoint -q "/run/archiso/bootmnt"; then
        _mnt_dev "${archisodevice}" "/run/archiso/bootmnt" "-r" "defaults"
        if [ "${copytoram}" != "y" ]; then
            readlink -f "${archisodevice}" >> /run/archiso/used_block_devices
        fi
    fi

    msg ":: Loading layers..."

    layerfile="/run/archiso/bootmnt/${archisobasedir}/layers.${arch}.txt"

    if [ "${copytoram}" = "y" ]; then
        msg ":: Mounting /run/archiso/copytoram (tmpfs) filesystem, size=${copytoram_size}"
        mkdir -p /run/archiso/copytoram
        mount -t tmpfs -o "size=${copytoram_size}",mode=0755 copytoram /run/archiso/copytoram
    fi

    if [ -n "${cow_device}" ]; then
        _mnt_dev "${cow_device}" "/run/archiso/cowspace" "-r" "${cow_flags}"
        readlink -f "${cow_device}" >> /run/archiso/used_block_devices
        mount -o remount,rw "/run/archiso/cowspace"
    else
        msg ":: Mounting /run/archiso/cowspace (tmpfs) filesystem, size=${cow_spacesize}..."
        mkdir -p /run/archiso/cowspace
        mount -t tmpfs -o "size=${cow_spacesize}",mode=0755 cowspace /run/archiso/cowspace
    fi
    mkdir -p "/run/archiso/cowspace/${cow_directory}"
    chmod 0700 "/run/archiso/cowspace/${cow_directory}"

    mkdir -p /run/archiso/layers

    msg ":: Start to checking layers integrity..."

    # inverse loop into layers file to mount then and create lowerdir list
    while read -r LINE; do
        local layer_name="${LINE}"
        msg ":: Loading layer ${layer_name}..."

        # shellcheck disable=SC2154
        # defined via initcpio's parse_cmdline()
        if [ "${checksum}" = "y" ]; then
            if [ -f "/run/archiso/bootmnt/${archisobasedir}/${arch}/${layer_name}.sha512" ]; then
                msg -n ":: Self-test requested for ${layer_name}, please wait..."
                if _verify_checksum; then
                    msg "done. Checksum is OK for ${layer_name}, continue booting."
                else
                    echo "ERROR: one or more files are corrupted for ${layer_name}"
                    echo "see /tmp/checksum.log for details"
                    launch_interactive_shell
                fi
            else
                echo "ERROR: checksum=y option specified but ${archisobasedir}/${arch}/${layer_name}.sha512 not found"
                launch_interactive_shell
            fi
        fi

        # shellcheck disable=SC2154
        # defined via initcpio's parse_cmdline()
        if [ "${verify}" = "y" ]; then
            if [ -f "/run/archiso/bootmnt/${archisobasedir}/${arch}/${layer_name}.sfs.sig" ]; then
                sigfile="${layer_name}.sfs.sig"
            elif [ -f "/run/archiso/bootmnt/${archisobasedir}/${arch}/${layer_name}.erofs.sig" ]; then
                sigfile="${layer_name}.erofs.sig"
            fi
            if [ -n "${sigfile}" ]; then
                msg -n ":: Signature verification requested for ${layer_name}, please wait..."
                if _verify_signature "${sigfile}"; then
                    msg "done. Signature is OK for ${layer_name}, continue booting."
                else
                    echo "ERROR: one or more files are corrupted in ${layer_name}"
                    launch_interactive_shell
                fi
            else
                echo "ERROR: verify=y option specified but GPG signature not found for ${layer_name} in ${archisobasedir}/${arch}/"
                launch_interactive_shell
            fi
        fi

        if [ -f "/run/archiso/bootmnt/${archisobasedir}/${arch}/${layer_name}.sfs" ]; then
            _mnt_sfs "/run/archiso/bootmnt/${archisobasedir}/${arch}/${layer_name}.sfs" "/run/archiso/layers/${layer_name}"
        elif [ -f "/run/archiso/bootmnt/${archisobasedir}/${arch}/${layer_name}.erofs" ]; then
            _mnt_erofs "/run/archiso/bootmnt/${archisobasedir}/${arch}/${layer_name}.erofs" "/run/archiso/layers/${layer_name}"
        fi

        if [ "${layer_dir}" = "" ]; then
            layer_dir="/run/archiso/layers/${layer_name}"
        else
            layer_dir="${layer_dir}:/run/archiso/layers/${layer_name}"
        fi

    done << EOF
$(tac "$layerfile")
EOF

    msg ":: Load OverlayFS with layers ${layer_dir}..."

    _mnt_overlayfs "${layer_dir}" "${newroot}" "/"

    if [ "${copytoram}" = "y" ]; then
        umount -d /run/archiso/bootmnt
        rmdir /run/archiso/bootmnt
    fi
}

# vim: set ft=sh:
